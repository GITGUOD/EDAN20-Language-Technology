# Old code which have been used to solve the assignment. Unfortunately, not all code here is useful as they did not function as I thought. Could be useful though:



''' Old code, took too long
def id_if_forEachDocument(master_index, dir='Selma/'):
    tfidf = {}  # Dictionary for all documents

    files = get_files(dir, 'txt')
    all_words = list(master_index.keys())  # All unique words in corpus as each word is branded as a key while the position as value

    for file in files:
        tfidf[file] = {}
        for word in all_words:
            tfidf[file][word] = calculating_id_tf(word, master_index, file)
    return tfidf
'''




# Old code, took to long and did not use the master index:
'''
# Tf will be the relative frequency of the term in the document
def tfCalculations(word, file):
    # Öppna texten
    text = open(file, 'r', encoding='utf-8').read().lower() 
    # Tokenisera texten
    index = tokenize(text)
    tokens = []
    for match in index:
        tokens.append(match.group())
    frequencyOfTerm = tokens.count(word)
    totalNbrWords = len(tokens)

    result = frequencyOfTerm/totalNbrWords
    if(result < 0.0):
        return 0
    else:
        return result
'''

'''
# idf, the logarithm base 10 of the inverse document frequency.
def idfCalculations(word, master_index):
    total_docs = len(get_files('Selma/', 'txt'))
        
    if word not in master_index:
        return 0  # ordet finns inte i något dokument
    d_t = len(master_index[word])  # antal dokument där ordet finns
    return math.log10(total_docs / d_t)
'''

'''
# According to the wikipedia page: Term frequency–inverse document frequency slide
def calculating_id_tf(word, file, master_index):
    idf = idfCalculations(word, master_index)
    tf = tfCalculations(word, file)
    return tf * idf

'''
